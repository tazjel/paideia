(dp1
S'output'
p2
S''
sS'layer'
p3
S'/home/ian/web2py/applications/paideia/controllers/default.py'
p4
sS'code'
p5
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\n\nimport datetime\n\nif 0:\n    from gluon import current\n    from gluon.tools import Auth\n    from gluon.dal import DAL\n    db = DAL()\n    auth = Auth()\n    response = current.response\n    session = current.session\n    request = current.request\n    from applications.paideia.models.paideia_stats import *\n    from applications.paideia.models.paideia_bugs import *\n    \n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n    """\n    return dict(message=T(\'Hello World\'))\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    # create instance of paideia_stats class from models\n    s = paideia_stats(auth.user_id)\n    t = paideia_timestats(auth.user_id)\n    w = paideia_weeklycount(auth.user_id)\n    b = paideia_bugs()\n    blist = b.bugresponse(auth.user_id)\n    session.debug = blist\n    return dict(form=auth(), score_avg=s.score_avg, total_len = t.total_len, total_cat1 = t.total_cat1, total_cat2 = t.total_cat2, total_cat3 = t.total_cat3, percent_cat1 = t.percent_cat1, percent_cat2 = t.percent_cat2, percent_cat3 = t.percent_cat3, total_cat4 = t.total_cat4, percent_cat4 = t.percent_cat4, htmlcal = w.htmlcal, blist = blist)\n\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request,db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id[\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs bust be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n\n@auth.requires_membership(role=\'administrators\')\ndef send_mail():\n    addr = db(db.auth_user.id == session.the_student).select(db.auth_user.email)\n    subj = session.mail_subject\n    msg = session.mail_message\n\n    if mail.send(to=addr, subject=subj, message=msg):\n        response.flash(\'mail sent successfully\')\n    else:\n        response.flash(\'There was a problem sending the mail.\')\n\n    return\n\n@auth.requires_membership(role=\'administrators\')\ndef bulk_cat_qs():\n    records = db(db.question_records.id > 0).select()\n    counter = 0\n    for record in records:\n        #figure out how the student is doing with this question\n        last_right = record.last_right\n        last_wrong = record.last_wrong\n        now_date = datetime.date.today()\n        right_dur = now_date-last_right\n        wrong_dur = now_date-last_wrong\n        rightWrong_dur = last_right - last_wrong\n        #categorize this question based on student\'s performance\n        if right_dur < wrong_dur:\n            if (right_dur < rightWrong_dur) and (right_dur < datetime.timedelta(days=170)):\n                if right_dur > datetime.timedelta(days=14):\n                    cat = 4\n                else:\n                    cat = 3\n            else:\n                cat = 2\n        else:\n            cat = 1\n        # update database with categorization\n        db(db.question_records.id == record.id).update(category = cat)\n        # count each record updated\n        counter += 1\n        session.debug = record.id\n\n    message = "Success. I categorized ", counter, " records."\n\n    return dict(message = message)\n\nresponse._vars=response._caller(user)\n'
p6
sS'snapshot'
p7
(dp8
sS'traceback'
p9
S'Traceback (most recent call last):\n  File "/home/ian/web2py/gluon/restricted.py", line 194, in restricted\n    exec ccode in environment\n  File "/home/ian/web2py/applications/paideia/controllers/default.py", line 138, in <module>\n  File "/home/ian/web2py/gluon/globals.py", line 149, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/ian/web2py/applications/paideia/controllers/default.py", line 53, in user\n    blist = b.bugresponse(auth.user_id)\n  File "/home/ian/web2py/applications/paideia/models/paideia_bugs.py", line 38, in bugresponse\n    d.append(b.q_bugs.bug_status2)\n  File "/home/ian/web2py/gluon/dal.py", line 3851, in __getattr__\n    return self[key]\n  File "/home/ian/web2py/gluon/dal.py", line 3842, in __getitem__\n    return dict.__getitem__(self, key)\nKeyError: \'bug_status2\'\n'
p10
s.