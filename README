Paideia
v. 0.2 (beta)

# Overview

Paideia is a web application for learning New Testament Greek. It is written in Python (along with some JavaScript) using the web2py framework (http://www.web2py.com). 

# License

Copyright 2011 Ian W. Scott (scottianw@gmail.com)
Licensed under GPL 3.0, the Paideia platform (application code) is free
open-source software.  

All images and creative content (including the text of the actual language-instruction interactions) are licensed under a Creative Commons Attribution Non-commercial license. In other words, you may re-use the content (not just the platform) as long as you give credit to me and do not charge money for it.

# Terminology

The basic metaphor for this educational game is that of a character exploring a new town. Hence the name "exploring" for this controller. That same metaphor is followed through in the naming of other functions here and (especially) in the module paideia_exploring.

:path:
The game is built on a quest-like model, but each quest or task is called a "path." This term does not refer in most cases to a file path but to a discrete set of interactions that the student must perform in sequence. In the rare case where a file path is intended this will be clear both from context and in the docstring. 

:step:
A path (i.e., quest or task) consists of several individual "steps." Each "step" is a single user interaction involving
- a prompt (an npc question or other stimulus calling for user response),
- a user response (entered as form data, through a number of possible widgets)
- a reply (feedback presented to the user, along with the user's next
    navigation options)
A single step is represented by the Step class in the paideia_exploring module.  Some paths may include just a single step, while others may include a sequence of several steps.

The base Step class involves a simple question prompt, calling for a text response entered in a regular text input field. This class is extended by
several other classes, allowing for different kinds of user response. These class names each begin with Step.

:walking:
Following the same metaphor, the movement through the steps of a path (and from one path to the next) is referred to as a "walk." So the controller function handling this movement is called walk() and the module includes a Walk class that holds logic related to transitions from one step to the next.

These transitions are complicated because the steps in a path often have to be completed in different locations around the fictional town of the game setting. Since the user is free to move as they choose from one town location to another, they may sometimes begin a second path in a new location before moving on to the location where the original path can be completed.

Session variables:

The movement between steps and between paths is controlled by means of
several variables set on the web2py session object:
- session.walk
    - tag_set (stores categorized grammatical tags for selecting paths; this
    information is calculated at the beginning of a new user session
    and then persists until the session expires.)
    - session.active_paths (tracks the paths that are currently active, along
    with the last step that has been initiated for each one)
    - session.completed (a cumulative list of the paths completed during the
    current user session)
    - session.location (reset to None whenever the user returns to town map)
    - session.path
    - session.step (stores the Step instance initialized in the 'ask' state
    so that it can be reused to evaluate the user response; reset to None
    just before 'reply' view is presented to user)

Several other session variables provide data persistence across the various
states of a single step.

