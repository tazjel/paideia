(dp1
S'output'
p2
S"<type 'exceptions.KeyError'> 'fields'"
p3
sS'layer'
p4
S'/home/ian/Web Pages/web2py/applications/paideia/controllers/plugin_ajaxselect.py'
p5
sS'code'
p6
S'if 0:\n    from gluon import current, SELECT, OPTION, SQLFORM, URL, LOAD, SPAN\n    request, response, db = current.request, current.response, current.db\n\nfrom gluon.sqlhtml import OptionsWidget, MultipleOptionsWidget\n\ndef set_widget():\n    """\n    creates a replacement instance of the OptionsWidget class defined in \n    gluon.sqlhtml and returns the result to re-populate the ajax LOAD field\n    """\n\n    #get variables to build widget for the proper field\n    #TODO: Can I get the table from db[field]._table or something like that?\n    table = request.args[0]\n    field = request.args[1]\n    #args[2] is the wrappername, but is not used in this function\n\n    #get name of table linked to this reference field\n    linktable = request.vars[\'linktable\']\n    #get current value of field to be selected in refreshed widget\n    if \'fieldval\' in request.vars:\n        valstring = request.vars[\'fieldval\']\n        #restore value to listing since it was converted to string for url\n        if valstring:\n            value = valstring.split(\'-\')\n        else:\n            value = None\n    else:\n        value = None\n        \n    #find out whether widget should be single select widget or multiselect\n    if \'multi\' in request.vars:\n        if request.vars[\'multi\'] == \'basic\':\n            widg = MultipleOptionsWidget()\n            mval = True;\n            sval = \'5\'\n    else:\n        widg = OptionsWidget()\n        mval = False;\n        sval = \'1\'\n\n    the_table = db[table]\n    the_field = the_table[field]\n    the_linktable = db[linktable]\n\n    #build listing of current field values\n    taglist = []\n    if request.vars[\'multi\'] == \'basic\':\n        if isinstance(value, list):\n            for v in value:\n                itm = db(the_linktable.id == v).select().first()   \n                vitm = itm.fields[0]\n                print vitmn                taglist.append(SPAN(itm, _class = \'select-tag\'))\n        else:\n            itm = db(the_linktable.id == value).select().first()\n            taglist.append(SPAN(itm, _class = \'select-tag\'))\n    print taglist\n\n    #testing for the extra argument added by javascript in plugin_ajaxselect.js \n    #when refresh is triggered by change in another select value\n    if \'rval\' in request.vars:\n        #get the value from the restricting select box to use in filtering this one\n        filter_val = request.vars[\'rval\']\n        #find the table behind the constraining widget\n        filter_t = request.vars[\'rtable\']\n        #find the corresponding field in this select\'s linked table\n        ref = \'reference %s\' % filter_t\n        cf = [f for f in the_linktable.fields if the_linktable[f].type == ref][0]\n        #filter the rows from the linked table accordingly\n        rows = db(the_linktable[cf] == filter_val).select()\n        #get the field name to represent values in the new select widget\n        rep = the_linktable.fields[1]\n        #build the name for the refreshed select widget\n        n = table + \'_\' + field\n               \n        #create the widget with filtered options\n        w = SELECT(_id = n, _class = \'generic-widget\', _name = field, \n                   _multiple = mval, size = sval, \n                   *[OPTION(e[rep], _value = e.id) for e in rows])\n    else:\n        #refresh using ordinary widget if no filter constraints\n        w = widg.widget(the_field, value)\n\n    return dict(widget = w, taglist = taglist, linktable = linktable)\n\ndef set_form_wrapper():\n    """\n    Creates the LOAD helper to hold the modal form for creating a new item in the linked table\n    """\n    tablename = request.args[0]\n    fieldname = request.args[1]\n    wrappername = request.args[2]\n    \n    formwrapper = LOAD(\'plugin_ajaxselect\', \'linked_create_form.load\', \n                       args = [tablename, fieldname, wrappername],\n                       vars = request.vars, \n                       ajax = True)\n\n    return dict(formwrapper = formwrapper)\n\n\ndef linked_create_form():\n    """\n    creates a form to insert a new entry into the linked table which populates the ajaxSelect widget\n    """\n\n    tablename = request.args[0]\n    fieldname = request.args[1]\n    wrappername = request.args[2]\n\n    linktable = request.vars[\'linktable\']\n    form = SQLFORM(db[linktable])\n\n    comp_url = URL(\'plugin_ajaxselect\', \'set_widget.load\', \n                   args = [tablename, fieldname, wrappername],\n                   vars = request.vars)\n\n    if form.process().accepted:\n        response.flash = \'form accepted\'\n        response.js = "web2py_component(\'%s\', \'%s\');" % (comp_url, wrappername)\n    else:\n        response.error = \'form was not processed\'\n\n    return dict(form = form)\n\nresponse._vars=response._caller(set_widget)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/ian/Web Pages/web2py/gluon/restricted.py", line 204, in restricted\n    exec ccode in environment\n  File "/home/ian/Web Pages/web2py/applications/paideia/controllers/plugin_ajaxselect.py", line 128, in <module>\n  File "/home/ian/Web Pages/web2py/gluon/globals.py", line 172, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/ian/Web Pages/web2py/applications/paideia/controllers/plugin_ajaxselect.py", line 53, in set_widget\n    vitm = itm.fields[0]\n  File "/home/ian/Web Pages/web2py/gluon/dal.py", line 4440, in __getattr__\n    return self[key]\n  File "/home/ian/Web Pages/web2py/gluon/dal.py", line 4431, in __getitem__\n    return dict.__getitem__(self, key)\nKeyError: \'fields\'\n'
p11
s.