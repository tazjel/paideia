!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AmbiguousTimeError	exceptions.py	/^class AmbiguousTimeError(InvalidTimeError):$/;"	c
BaseTzInfo	tzinfo.py	/^class BaseTzInfo(tzinfo):$/;"	c
Central	reference.py	/^Central  = USTimeZone(-6, "Central",  "CST", "CDT")$/;"	v
DSTDIFF	reference.py	/^DSTDIFF = DSTOFFSET - STDOFFSET$/;"	v
DSTEND	reference.py	/^DSTEND = datetime(1, 10, 25, 1)$/;"	v
DSTOFFSET	reference.py	/^    DSTOFFSET = STDOFFSET$/;"	v
DSTOFFSET	reference.py	/^    DSTOFFSET = timedelta(seconds = -_time.altzone)$/;"	v
DSTSTART	reference.py	/^DSTSTART = datetime(1, 4, 1, 2)$/;"	v
DstTzInfo	tzinfo.py	/^class DstTzInfo(BaseTzInfo):$/;"	c
Eastern	reference.py	/^Eastern  = USTimeZone(-5, "Eastern",  "EST", "EDT")$/;"	v
FixedOffset	__init__.py	/^def FixedOffset(offset, _tzinfos = {}):$/;"	f
FixedOffset	reference.py	/^class FixedOffset(tzinfo):$/;"	c
HOUR	__init__.py	/^HOUR = datetime.timedelta(hours=1)$/;"	v
InvalidTimeError	exceptions.py	/^class InvalidTimeError(Exception):$/;"	c
Local	reference.py	/^Local = LocalTimezone()$/;"	v
LocalTimezone	reference.py	/^class LocalTimezone(tzinfo):$/;"	c
Mountain	reference.py	/^Mountain = USTimeZone(-7, "Mountain", "MST", "MDT")$/;"	v
NonExistentTimeError	exceptions.py	/^class NonExistentTimeError(InvalidTimeError):$/;"	c
OLSEN_VERSION	__init__.py	/^OLSEN_VERSION = OLSON_VERSION # Old releases had this misspelling$/;"	v
OLSON_VERSION	__init__.py	/^OLSON_VERSION = '2012d'$/;"	v
Pacific	reference.py	/^Pacific  = USTimeZone(-8, "Pacific",  "PST", "PDT")$/;"	v
STDOFFSET	reference.py	/^STDOFFSET = timedelta(seconds = -_time.timezone)$/;"	v
StaticTzInfo	tzinfo.py	/^class StaticTzInfo(BaseTzInfo):$/;"	c
USTimeZone	reference.py	/^class USTimeZone(tzinfo):$/;"	c
UTC	__init__.py	/^class UTC(datetime.tzinfo):$/;"	c
UnknownTimeZoneError	exceptions.py	/^class UnknownTimeZoneError(KeyError):$/;"	c
VERSION	__init__.py	/^VERSION = OLSON_VERSION$/;"	v
ZERO	__init__.py	/^ZERO = datetime.timedelta(0)$/;"	v
_CountryNameDict	__init__.py	/^class _CountryNameDict(_LazyDict):$/;"	c
_CountryTimezoneDict	__init__.py	/^class _CountryTimezoneDict(_LazyDict):$/;"	c
_FixedOffset	__init__.py	/^class _FixedOffset(datetime.tzinfo):$/;"	c
_LazyDict	__init__.py	/^class _LazyDict(DictMixin):$/;"	c
_NULL	tzfile.py	/^_NULL = _byte_string('\\0')$/;"	v
_UTC	__init__.py	/^def _UTC():$/;"	f
__all__	__init__.py	/^__all__ = [$/;"	v
__all__	exceptions.py	/^__all__ = [$/;"	v
__all__	tzinfo.py	/^__all__ = []$/;"	v
__call__	__init__.py	/^    def __call__(self, iso3166_code):$/;"	m	class:_CountryTimezoneDict	file:
__contains__	__init__.py	/^    def __contains__(self, key):$/;"	m	class:_LazyDict	file:
__getitem__	__init__.py	/^    def __getitem__(self, key):$/;"	m	class:_LazyDict	file:
__init__	__init__.py	/^    def __init__(self, minutes):$/;"	m	class:_FixedOffset
__init__	reference.py	/^    def __init__(self, hours, reprname, stdname, dstname):$/;"	m	class:USTimeZone
__init__	reference.py	/^    def __init__(self, offset, name):$/;"	m	class:FixedOffset
__init__	tzinfo.py	/^    def __init__(self, _inf=None, _tzinfos=None):$/;"	m	class:DstTzInfo
__iter__	__init__.py	/^    def __iter__(self):$/;"	m	class:_LazyDict	file:
__len__	__init__.py	/^    def __len__(self):$/;"	m	class:_LazyDict	file:
__reduce__	__init__.py	/^    def __reduce__(self):$/;"	m	class:UTC	file:
__reduce__	__init__.py	/^    def __reduce__(self):$/;"	m	class:_FixedOffset	file:
__reduce__	tzinfo.py	/^    def __reduce__(self):$/;"	m	class:DstTzInfo	file:
__reduce__	tzinfo.py	/^    def __reduce__(self):$/;"	m	class:StaticTzInfo	file:
__repr__	__init__.py	/^    def __repr__(self):$/;"	m	class:UTC	file:
__repr__	__init__.py	/^    def __repr__(self):$/;"	m	class:_FixedOffset	file:
__repr__	reference.py	/^    def __repr__(self):$/;"	m	class:USTimeZone	file:
__repr__	tzinfo.py	/^    def __repr__(self):$/;"	m	class:DstTzInfo	file:
__repr__	tzinfo.py	/^    def __repr__(self):$/;"	m	class:StaticTzInfo	file:
__str__	__init__.py	/^    def __str__(self):$/;"	m	class:UTC	file:
__str__	tzinfo.py	/^    def __str__(self):$/;"	m	class:BaseTzInfo	file:
__version__	__init__.py	/^__version__ = OLSON_VERSION$/;"	v
_byte_string	tzfile.py	/^def _byte_string(s):$/;"	f
_datetime_cache	tzinfo.py	/^_datetime_cache = {0: _epoch}$/;"	v
_dst	__init__.py	/^    _dst = ZERO$/;"	v	class:UTC
_dst	tzinfo.py	/^    _dst = None # DST offset$/;"	v	class:DstTzInfo
_epoch	tzinfo.py	/^_epoch = datetime.utcfromtimestamp(0)$/;"	v
_fill	__init__.py	/^    def _fill(self):$/;"	m	class:_CountryNameDict
_fill	__init__.py	/^    def _fill(self):$/;"	m	class:_CountryTimezoneDict
_isdst	reference.py	/^    def _isdst(self, dt):$/;"	m	class:LocalTimezone
_notime	tzinfo.py	/^_notime = memorized_timedelta(0)$/;"	v
_p	__init__.py	/^def _p(*args):$/;"	f
_std_string	tzfile.py	/^def _std_string(s):$/;"	f
_test	__init__.py	/^def _test():$/;"	f
_timedelta_cache	tzinfo.py	/^_timedelta_cache = {}$/;"	v
_to_seconds	tzinfo.py	/^def _to_seconds(td):$/;"	f
_transition_info	tzinfo.py	/^    _transition_info = None # [(utcoffset, dstoffset, tzname)] corresponding$/;"	v	class:DstTzInfo
_ttinfo_cache	tzinfo.py	/^_ttinfo_cache = {}$/;"	v
_tzinfo_cache	__init__.py	/^_tzinfo_cache = {}$/;"	v
_tzinfos	tzinfo.py	/^    _tzinfos = None$/;"	v	class:DstTzInfo
_tzname	__init__.py	/^    _tzname = zone$/;"	v	class:UTC
_tzname	tzinfo.py	/^    _tzname = None$/;"	v	class:BaseTzInfo
_unmunge_zone	__init__.py	/^def _unmunge_zone(zone):$/;"	f
_utc_transition_times	tzinfo.py	/^    _utc_transition_times = None # Sorted list of DST transition times in UTC$/;"	v	class:DstTzInfo
_utcoffset	__init__.py	/^    _utcoffset = ZERO$/;"	v	class:UTC
_utcoffset	tzinfo.py	/^    _utcoffset = None$/;"	v	class:BaseTzInfo
all_timezones	__init__.py	/^['Africa\/Abidjan',$/;"	v
all_timezones	__init__.py	/^all_timezones = [$/;"	v
all_timezones_set	__init__.py	/^all_timezones_set = set(all_timezones)$/;"	v
ascii	__init__.py	/^    def ascii(s):$/;"	f
base	tzfile.py	/^    base = os.path.join(os.path.dirname(__file__), 'zoneinfo')$/;"	v
build_tzinfo	tzfile.py	/^def build_tzinfo(zone, fp):$/;"	f
common_timezones	__init__.py	/^['Africa\/Abidjan',$/;"	v
common_timezones	__init__.py	/^common_timezones = [$/;"	v
common_timezones_set	__init__.py	/^common_timezones_set = set(common_timezones)$/;"	v
country_names	__init__.py	/^country_names = _CountryNameDict()$/;"	v
country_timezones	__init__.py	/^country_timezones = _CountryTimezoneDict()$/;"	v
data	__init__.py	/^    data = None$/;"	v	class:_LazyDict
dst	__init__.py	/^    def dst(self, dt):$/;"	m	class:UTC
dst	__init__.py	/^    def dst(self, dt):$/;"	m	class:_FixedOffset
dst	reference.py	/^    def dst(self, dt):$/;"	m	class:FixedOffset
dst	reference.py	/^    def dst(self, dt):$/;"	m	class:LocalTimezone
dst	reference.py	/^    def dst(self, dt):$/;"	m	class:USTimeZone
dst	tzinfo.py	/^    def dst(self, dt, is_dst=None):$/;"	m	class:DstTzInfo
dst	tzinfo.py	/^    def dst(self, dt, is_dst=None):$/;"	m	class:StaticTzInfo
first_sunday_on_or_after	reference.py	/^def first_sunday_on_or_after(dt):$/;"	f
fromutc	__init__.py	/^    def fromutc(self, dt):$/;"	m	class:UTC
fromutc	tzinfo.py	/^    def fromutc(self, dt):$/;"	m	class:DstTzInfo
fromutc	tzinfo.py	/^    def fromutc(self, dt):$/;"	m	class:StaticTzInfo
keys	__init__.py	/^    def keys(self):$/;"	m	class:_LazyDict
localize	__init__.py	/^    def localize(self, dt, is_dst=False):$/;"	m	class:UTC
localize	__init__.py	/^    def localize(self, dt, is_dst=False):$/;"	m	class:_FixedOffset
localize	tzinfo.py	/^    def localize(self, dt, is_dst=False):$/;"	m	class:DstTzInfo
localize	tzinfo.py	/^    def localize(self, dt, is_dst=False):$/;"	m	class:StaticTzInfo
memorized_datetime	tzinfo.py	/^def memorized_datetime(seconds):$/;"	f
memorized_timedelta	tzinfo.py	/^def memorized_timedelta(seconds):$/;"	f
memorized_ttinfo	tzinfo.py	/^def memorized_ttinfo(*args):$/;"	f
normalize	__init__.py	/^    def normalize(self, dt, is_dst=False):$/;"	m	class:UTC
normalize	__init__.py	/^    def normalize(self, dt, is_dst=False):$/;"	m	class:_FixedOffset
normalize	tzinfo.py	/^    def normalize(self, dt):$/;"	m	class:DstTzInfo
normalize	tzinfo.py	/^    def normalize(self, dt, is_dst=False):$/;"	m	class:StaticTzInfo
open_resource	__init__.py	/^def open_resource(name):$/;"	f
resource_exists	__init__.py	/^def resource_exists(name):$/;"	f
resource_stream	__init__.py	/^    resource_stream = None$/;"	v
timezone	__init__.py	/^def timezone(zone):$/;"	f
tz	tzfile.py	/^    tz = build_tzinfo('Australia\/Melbourne',$/;"	v
tz	tzfile.py	/^    tz = build_tzinfo('US\/Eastern',$/;"	v
tzname	__init__.py	/^    def tzname(self, dt):$/;"	m	class:UTC
tzname	__init__.py	/^    def tzname(self, dt):$/;"	m	class:_FixedOffset
tzname	reference.py	/^    def tzname(self, dt):$/;"	m	class:FixedOffset
tzname	reference.py	/^    def tzname(self, dt):$/;"	m	class:LocalTimezone
tzname	reference.py	/^    def tzname(self, dt):$/;"	m	class:USTimeZone
tzname	tzinfo.py	/^    def tzname(self, dt, is_dst=None):$/;"	m	class:DstTzInfo
tzname	tzinfo.py	/^    def tzname(self, dt, is_dst=None):$/;"	m	class:StaticTzInfo
unicode	__init__.py	/^    unicode = str$/;"	v
unpickler	tzinfo.py	/^def unpickler(zone, utcoffset=None, dstoffset=None, tzname=None):$/;"	f
utcoffset	__init__.py	/^    def utcoffset(self, dt):$/;"	m	class:UTC
utcoffset	__init__.py	/^    def utcoffset(self, dt):$/;"	m	class:_FixedOffset
utcoffset	reference.py	/^    def utcoffset(self, dt):$/;"	m	class:FixedOffset
utcoffset	reference.py	/^    def utcoffset(self, dt):$/;"	m	class:LocalTimezone
utcoffset	reference.py	/^    def utcoffset(self, dt):$/;"	m	class:USTimeZone
utcoffset	tzinfo.py	/^    def utcoffset(self, dt, is_dst=None):$/;"	m	class:DstTzInfo
utcoffset	tzinfo.py	/^    def utcoffset(self, dt, is_dst=None):$/;"	m	class:StaticTzInfo
zone	__init__.py	/^    zone = "UTC"$/;"	v	class:UTC
zone	__init__.py	/^    zone = None # to match the standard pytz API$/;"	v	class:_FixedOffset
zone	tzinfo.py	/^    zone = None$/;"	v	class:BaseTzInfo
zone	tzinfo.py	/^    zone = None$/;"	v	class:DstTzInfo
