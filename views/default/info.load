{{
from plugin_widgets import TOOLTIP, TABS, ROLE
import json
}}

            <!--Above Tabs ================================================================-->
        {{=UL(LI(SPAN('Name', _class='profile-label'), the_name,
                                 _class='profile-name'),
                      LI(SPAN('Email', _class='profile-label'), email,
                         _class='profile-email'),
                      LI(SPAN('Time Zone', _class='profile-label'), tz,
                         _class='profile-name'),
      _class='profile-user-info')
}}
{{
# TAB 1 - BADGE INFO ==========================================================
tab1_content = CAT(DIV(H4('Set progress'),
                       P('So far, I have reached set {}.'.format(max_set)),
                       P('My goal for {} is to reach the {} set of badges by '
                         '{}'.format(goal[0], goal[1], goal[2])),
                       _id='info-tab1-set-progress'),
                   DIV(H4('Badge levels earned'),
                       TABLE(TR(TD('level 4'), TD('master'),
                                TD(len(badge_levels[4])),
                                TD(UL([LI(b[0], _class='badge badge-success') for b in badge_levels[4]]))
                                ),
                             TR(TD('level 3'), TD('journeyman'),
                                TD(len(badge_levels[3])),
                                TD(UL([LI(b[0]) for b in badge_levels[3]]))
                                ),
                             TR(TD('level 2'), TD('apprentice'),
                                TD(len(badge_levels[2])),
                                TD(UL([LI(b[0], _class='badge badge-warning') for b in badge_levels[2]]))
                                ),
                             TR(TD('level 1'), TD('beginner'),
                                TD(len(badge_levels[1])),
                                TD(UL([LI(b[0], _class='badge badge-info') for b in badge_levels[1]]))
                                ),
                             _class='table table-bordered'
                             ),
                       _id='info-tab1-badge-levels'),
                   DIV(TABLE(THEAD(TR(TH('Badge'),
                                      TH('Set'),
                                      TH('Level'),
                                      TH('Times Right'),
                                      TH('Last Right'),
                                      TH('Times Wrong'),
                                      TH('Last Wrong'),
                                      TH('Right per 1 wrong'),
                                      TH('Days since last right'),
                                      TH('Days since last wrong'),
                                      TH('Days between last right and last wrong')
                                      ),
                                    _class='header'
                                    ),
                              _class='table table-hover table-condensed',
                              _id='table-badges'
                              ),
                        _class='dc_container badgetable-container',
                        _style='font: 12px sans-serif;'
                        )
                    )
}}
{{for trow in badge_table_data:
badgerow = TR(TD(trow['bname']),
              TD(trow['set']),
              TD(trow['curlev']),
              TD(trow['tright']),
              TD(trow['tlr'][1]),
              TD(trow['twrong']),
              TD(trow['tlw'][1]),
              TD(trow['rw_ratio']),
              TD(trow['delta_r'].days),
              TD(trow['delta_w'].days),
              TD(trow['delta_rw'].days),
              )
badgerow[4]['_data-order'] = trow['tlr'][0]  # sort column by raw date
badgerow[6]['_data-order'] = trow['tlw'][0]  # sort column by raw date
tab1_content[2][0].append(badgerow)

# TAB 2 - BADGES =============================================================

tab2_content = CAT(P('Sorry, something went wrong retrieving your badges.'))

pass

tab2_content.append(CAT(H3('What do these levels mean?'),
    P('It is important to realize that the four badge levels above are '
      'not "grades" like the letter grades we earn in most courses. They are, '
      'instead, stages in your learning of each element of Greek. Level 1 '
      '(beginner) is awarded when you start to learn a topic. It simply means '
      'that you are working on it. In your daily interactions in the town, the '
      'program will prioritize conversations tagged with these "beginner" badges '
      'since they are the ones you most need to review.'),
    P('At the other end of the scale, Level 4 (master) is awarded when you no '
      'longer need to learn anything more about that aspect of the language. '
      'You have shown that this knowledge is now in your long-term memory, and '
      'you are now on a permanent maintenance routine in which you only review '
      'that material once every six months. Don\'t be discouraged if you find '
      'that it takes a long time to reach "master" level for any badges. This '
      'doesn\'t mean you aren\'t progressing. It just means that you\'re still '
      'working on getting that topic into your long-term memory -- a process '
      'that can\'t be rushed.'),
    P('Between these two extremes, level 2 ("apprentice") and level 3 '
      '("journeyman") represent increasing levels of mastery over a particular '
      'element of Greek. You will review the material related to such badges '
      'less and less often as you continue to provide good responses when such '
      'conversations do come up. Normally, you will find that badges begun '
      'during a term will remain at levels 2 or 3 through at least the balance '
      'of that term. This doesn\'t mean anything is wrong. It just represents '
      'the fact that true mastery is a longer-term goal.'),
    H3('How do I earn new badges?'),
    P('You begin a new badge at level 1 when all of your current badges have '
      'been promoted to level 2 or higher. The program recognizes that you are '
      'ready to learn something new.'),
    P('There are two different ways to reach level 2 ("apprentice") with a '
      'particular badge. (a) First, if you provide consistently right answers '
      '(with no errors) over a period of a day or two, then that badge will be '
      'promoted to level 2. (b) Alternately, you will be promoted despite some '
      'errors if you have given at least 8 correct responses for each error over '
      'the last two weeks. In either case you won\'t be promoted until you have '
      'done at least 20 paths related to that badge, with at least 24 hours '
      'between the first success and the most recent success. Keep in mind that '
      'on a given day your paths will not all be focused on the same badges. '
      'So even if you provide good answers on 20 paths in a row, this may mean '
      'that you have only added 5 or 6 successes to your record for a particular '
      'badge. This is one advantage of doing extra paths regularly - you will '
      'progress more quickly because you are working on each of your level 1 '
      'badges more often.'),
    P('Levels 3 and 4 are reached as you go longer and longer without any '
      'errors in your responses on a given topic. If you make no errors with a '
      'badge over 7 days, it will be promoted to level 3. You are clearly '
      'retaining that knowledge and beginning toward real mastery. If you then '
      'go 30 days without any errors on that topic, the badge will be promoted '
      'to level 4 (mastered).'),
    H3('What are the "Badge Level" and "Review Level" columns?'),
    P('In the "badge level" column you see the highest level you have achieved '
      'so far for a particular badge. Periodically, though, the program will '
      'decide that you need to review your level 2, 3, or 4 badges. At that '
      'point, the badge will move to "level 1" in the "review level" column. '
      'This doesn\'t mean you have been demoted. It just means that the program '
      'is going to prioritize that badge as if it were brand new material. Even '
      'for badges that you have mastered, you will review those topics at least '
      'once every three months. If you give good responses to the review '
      'material, this review level will last only a day. The next day you will '
      'find the badge has returned to its normal review level and you will be '
      'much less likely to see those paths until the next review period is up.'),
    P('If you give a wrong answer during a review period, you don\'t lose your '
      'previous badge level. But the program recognizes that you may need to '
      'review that material more frequently. So, instead of the badge jumping '
      'right back to its original review level, you will see it move up through '
      'the review levels as if you were earning it again. This just means that '
      'the program is making sure you see it often enough. If you don\'t make '
      'more mistakes, you will quickly find the badge\'s review level is back '
      'up to the "badge level" you have attained.')
))

# TAB 3 - CALENDAR ===========================================================
tab3_content = XML(cal)

# TAB 4 - BUGS ===============================================================
tab4_content = TABLE(TR(TH('question'),
                        TH('your answer'),
                        TH('submitted'),
                        TH('evaluation'),
                        TH('instructor\'s comments')),
                     _class='table table-condensed')
for bug in blist:
    row = TR()
    # first position is the id, used in edit link
    for val in bug[1:]:
        row.append(TD(val))
    pass
    row.append(ROLE(TD(A('edit', _href=URL('editing', 'listing.html',
                                           args=['bugs', bug[0]],
                                           vars=dict(restrictor={'bug_status': '5'}))
                    ))))
    tab4_content.append(row)
pass

# TAB 5 - STATS ==============================================================
answers_table = TABLE(TR(TH('date'),
                         TH('right'),
                         TH('wrong')))

for datum in answer_counts[:5]:
    row = TR(TD(datum['date']), TD(datum['right']), TD(datum['wrong']))
    answers_table.append(row)
pass

tab5_content = CAT(DIV(_class='chart', _id='stats-milestones'),
                   DIV(_class='chart', _id='stats-answers'),
                   P(json.dumps(badge_set_milestones)),
                   answers_table)

}}

<!--# ASSEMBLE AND PRINT ==================================================-->
{{=TABS([('My Badges', 'web2py_user_form', tab1_content, 'active'),
         ('Calendar', 'tab_calendar', tab3_content),
         ('Bug Reports', 'tab_bug_reports', tab4_content),
         ('Stats', 'tab_stats', tab5_content)])
}}

<!--# LOCAL SCRIPTS ======================================================-->
<script type="text/javascript" charset="utf-8">
(function() {
    var badgetable = $('#table-badges').DataTable({
                        paging: false,
                        scrollY: '400px',
                        scrollX: true,
                        renderer: 'bootstrap',
                        order: [2, 'asc'],
                        colVis: {
                            exclude: [ 0 ]
                        }
                     });
    new $.fn.dataTable.FixedColumns( badgetable );
    var colvis = new $.fn.dataTable.ColVis( badgetable );
    $( colvis.button() ).insertBefore('div.badgetable-container');

    user_stats.badge_set_milestones = JSON.parse('{{=XML(json.dumps(badge_set_milestones))}}');
    user_stats.answer_counts = JSON.parse('{{=XML(json.dumps(answer_counts))}}');
    user_stats.render_all();
})();
</script>

<style>
/***********************/
/* USER STATS & CHARTS */
/***********************/
.chart .axis line,
.chart .axis path {
    fill: none;
    stroke-width: 1;
}
/***********************/
/* USER STATS & CHARTS */
/***********************/
.chart line,
.chart path {
    shape-rendering: crispEdges;
}

.chart .axis line,
.chart .axis path,
.chart .tick line {
    fill: none;
    stroke: black;
}
</style>
