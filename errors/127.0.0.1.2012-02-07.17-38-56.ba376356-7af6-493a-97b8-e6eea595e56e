(dp1
S'output'
p2
S"<type 'exceptions.KeyError'> 'tags_secondary'"
p3
sS'layer'
p4
S'/home/ian/web2py/applications/paideia/models/paideia.py'
p5
sS'code'
p6
S'# coding: utf8\n\n#hack for PyDev error checking and debugging\nif 0:\n    from gluon import current, IS_IN_DB\n    from gluon.dal import DAL, Field\n    from gluon.tools import Auth\n    auth = Auth()\n    db = DAL()\n    request = current.request\n    from applications.paideia.modules.plugin_ajaxselect import AjaxSelect\n\n#os module needed for setting upload folders for images and audio\nimport os\n#plugin from http://dev.s-cubism.com/plugin_multiselect_widget\nfrom plugin_ajaxselect import AjaxSelect\nimport datetime\n\ndtnow = datetime.datetime.utcnow()\n\ndb.define_table(\'categories\',\n    Field(\'category\'),\n    Field (\'description\'),\n    format = \'%(category)s\')\n\ndb.define_table(\'tags\',\n    Field(\'tag\', \'string\'),\n    format = \'%(tag)s\')\n\ndb.define_table(\'locations\',\n    Field(\'location\'),\n    Field(\'background\', \'upload\', uploadfolder = os.path.join(request.folder, "static/images")),\n    format = \'%(location)s\')\n\ndb.define_table(\'npcs\',\n    Field(\'name\', \'string\'),\n    Field(\'location\', \'list:reference db.locations\'),\n    Field(\'image\', \'upload\', uploadfolder = os.path.join(request.folder, "static/images")),\n    format = \'%(name)s\')\n\ndb.define_table(\'questions\',\n    Field(\'question\', \'text\'),\n    Field(\'answer\'),\n    Field(\'value\', \'double\', default = 1.0),\n    Field(\'readable_answer\'),\n    Field(\'answer2\', default = \'null\'),\n    Field(\'value2\', \'double\', default = 0.5),\n    Field(\'answer3\', default = \'null\'),\n    Field(\'value3\', \'double\', default = 0.3),\n    Field(\'frequency\', \'double\'),\n    Field(\'tags\', \'list:reference db.tags\'),\n    Field(\'tags_secondary\', \'list:reference db.tags\'),\n    Field(\'status\', \'integer\'),\n    Field(\'npcs\', \'list:reference db.npcs\'),\n    Field(\'next\', \'list:reference db.questions\'),\n    Field(\'audio\', \'upload\', uploadfolder = os.path.join(request.folder, "static/audio")),\n    format = \'%(question)s\')\n\ndb.questions.tags.requires = IS_IN_DB(db, \'questions.id\', db.questions._format, multiple = True)\ndb.questions.npcs.requires = IS_IN_DB(db, \'npcs.id\', db.npcs._format, multiple = True)\ndb.questions.npcs.widget = lambda field, value: AjaxSelect(field, value, \'npcs\', multi = \'basic\').widget()\ndb.questions.tags.requires = IS_IN_DB(db, \'tags.id\', db.tags._format, multiple = True)\ndb.questions.tags.widget = lambda field, value: AjaxSelect(field, value, \'tags\', refresher = True, multi = \'basic\').widget()\ndb.questions.tags_secondary.requires = IS_IN_DB(db, \'tags_secondary.id\', db.tags_secondary._format, multiple = True)\ndb.questions.tags_secondary.widget = lambda field, value: AjaxSelect(field, value, \'tags_secondary\', multi = \'basic\').widget()\n\ndb.define_table(\'quizzes\',\n    Field(\'quiz\'),\n    Field(\'length\'),\n    Field(\'tags\', \'list:reference db.tags\'),\n    Field(\'frequency\'),\n    Field(\'groups\', \'list:reference db.auth_group\'),\n    Field(\'start_date\', \'date\', default = dtnow),\n    Field(\'end_date\', \'date\'),\n    format = \'%(quiz)s\')\n\ndb.quizzes.tags.requires = IS_IN_DB(db, \'tags.id\', db.tags._format, multiple = True)\ndb.quizzes.groups.requires = IS_IN_DB(db, \'auth_group.id\', db.auth_group._format, multiple = True)\n\ndb.define_table(\'question_records\',\n    Field(\'name\', db.auth_user, default = auth.user_id),\n    Field(\'question\', db.questions),\n    Field(\'times_right\', \'double\'),\n    Field(\'times_wrong\', \'double\'),\n    Field(\'tlast_wrong\', \'datetime\', default = dtnow),\n    Field(\'tlast_right\', \'datetime\', default = dtnow),\n    Field(\'category\', db.categories)\n    )\n\ndb.define_table(\'tag_records\',\n    Field(\'name\', db.auth_user, default = auth.user_id),\n    Field(\'tag\', db.tags),\n    Field(\'times_right\', \'double\'),\n    Field(\'times_wrong\', \'double\'),\n    Field(\'tlast_wrong\', \'datetime\', default = dtnow),\n    Field(\'tlast_right\', \'datetime\', default = dtnow),\n    Field(\'category\', db.categories)\n    )\n\ndb.define_table(\'attempt_log\',\n    Field(\'name\', db.auth_user, default = auth.user_id),\n    Field(\'question\', db.questions),\n    Field(\'score\', \'double\'),\n    Field(\'quiz\', db.quizzes),\n    Field(\'dt_attempted\', \'datetime\', default = dtnow)\n    )\n\ndb.define_table(\'quiz_records\',\n    Field(\'name\', db.auth_user, default = auth.user_id),\n    Field(\'quiz\', db.quizzes),\n    Field(\'score\', \'double\'),\n    Field(\'date_taken\', \'datetime\', default = dtnow)\n    )\n\ndb.define_table(\'bug_status\',\n    Field(\'status_label\'),\n    format = \'%(status_label)s\')\n\ndb.define_table(\'q_bugs\',\n    Field(\'question\', db.questions),\n    Field(\'a_submitted\'),\n    Field(\'name\', db.auth_user, default = auth.user_id),\n    Field(\'submitted\', \'datetime\', default = dtnow),\n    Field(\'bug_status\', db.bug_status, default = 1),\n    Field(\'admin_comment\', \'text\'),\n    Field(\'prev_lastright\', \'datetime\'),\n    Field(\'prev_lastwrong\', \'datetime\'),\n    format = \'%(question)s\')\n\ndb.define_table(\'news\',\n    Field(\'story\', \'text\'),\n    Field(\'title\', \'string\'),\n    Field(\'name\', db.auth_user, default = auth.user_id),\n    Field(\'date_submitted\', \'datetime\', default = dtnow),\n    Field(\'last_edit\', \'datetime\', default = dtnow),\n    format = \'%(title)s\')\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/ian/web2py/gluon/restricted.py", line 204, in restricted\n    exec ccode in environment\n  File "/home/ian/web2py/applications/paideia/models/paideia.py", line 64, in <module>\n    db.questions.tags_secondary.requires = IS_IN_DB(db, \'tags_secondary.id\', db.tags_secondary._format, multiple = True)\n  File "/home/ian/web2py/gluon/dal.py", line 5119, in __getattr__\n    return self[key]\n  File "/home/ian/web2py/gluon/dal.py", line 5113, in __getitem__\n    return dict.__getitem__(self, str(key))\nKeyError: \'tags_secondary\'\n'
p11
s.