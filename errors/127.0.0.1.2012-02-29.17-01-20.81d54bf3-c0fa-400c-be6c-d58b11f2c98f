(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> unsupported operand type(s) for +: 'SPAN' and 'A'"
p3
sS'layer'
p4
S'/home/iscott/web/web2py/applications/paideia/controllers/plugin_listandedit.py'
p5
sS'code'
p6
S'# coding: utf8\nif 0:\n    from gluon import current, URL, A\n    from gluon.sqlhtml import SQLFORM\n    response, request, db, session = current.response, current.request, current.db, current.session\n\nimport ast\n\ndef listing():\n    """\n    This plugin creates a large widget to display, edit, and add entries\n    to one database table.  \n    \n    LIST FORMAT\n    By default the table rows are listed using either the "format" property \n    of the table definition in the db model (if their is one), or the contents\n    of the first table field (after the auto-generated id).\n    \n    ARGUMENTS \n    Takes one required argument, the name of the table to be listed. \n    \n    VARIABLES\n    An optional variable "restrictor" can be used to filter the displayed \n    records. This variable must be a dictionary in which the keys are the names \n    of fields in the table and the values are the values to be allowed in those \n    fields when generating the list.\n    """\n    response.files.append(URL(\'static\', \n            \'plugin_listandedit/plugin_listandedit.css\'))\n    response.files.append(URL(\'static\', \n            \'plugin_listandedit/plugin_listandedit.js\'))\n    \n    #get table to be listed\n    tablename = request.args[0]\n    #pass that name on to be used as a title for the widget\n    rname = tablename\n    \n    #get filtering values if any\n    if \'restrictor\' in request.vars:\n        restr = request.vars[\'restrictor\']\n        # convert the string from the URL to a python dictionary object\n        restrictor = ast.literal_eval(restr)\n    else:\n        restrictor = None\n    session.restrictor = restrictor\n\n    #check to make sure the required argument names a table in the db\n    if not tablename in db.tables():\n        response.flash = \'\'\'Sorry, you are trying to list \n        entries from a table that does not exist in the database.\'\'\'\n    else:\n        tb = db[tablename]\n        #select all rows in the table\n        \n        #filter that set based on any provided field-value pairs in request.vars.restrictor\n        if restrictor:\n            for k, v in restrictor.items():\n                filter_select = db(tb[k] == v)._select(tb.id)\n                rowlist = db(tb.id.belongs(filter_select)).select()\n        else:\n            rowlist = db(tb.id > 0).select()\n\n    # build html list from the selected rows \n    listset = []\n    for r in rowlist:\n        fieldname = db[tablename].fields[1]\n        # use format string from db table definition to list entries (if available)\n        if db[tablename]._format:\n            listformat = db[tablename]._format % r\n        else:\n            listformat = r[fieldname]\n\n        i = A(listformat, _href=URL(\'plugin_listandedit\', \'edit.load\', args=[tablename, r.id]), _class=\'plugin_listandedit_list\', cid=\'viewpane\')\n        listset.append(i)\n\n    # create a link for adding a new row to the table\n    adder = A(\'Add new\', _href=URL(\'plugin_listandedit\', \'edit.load\', args=[tablename]), _class=\'plugin_listandedit_list\', cid=\'viewpane\')\n\n    return dict(listset = listset, adder = adder, rname = rname)\n\ndef makeurl(tablename):\n    if session.restrictor:\n        rstring = \'{\'\n        for k, v in session.restrictor:\n            rstring += "\'%s\':\'%s\'" % k, v\n        rstring += \'}\'\n    else:\n        rstring = \'\'\n    the_url = URL(\'plugin_listandedit\', \'listing.load\', args=tablename, vars=rstring)\n    return the_url\n\ndef edit():\n    tablename = request.args[0]\n    if len(request.args) > 1:\n        rowid = request.args[1]\n        formname = \'%s/%s\' % (tablename, rowid)\n\n        #TODO: Set value of "project" field programatically\n        #TODO: re-load listing component on form submit\n        form = SQLFORM(db[tablename], rowid, separator=\'\', showid=False)\n        if form.process(formname=formname).accepted:\n            the_url = makeurl(tablename)\n            response.js = "web2py_component(\'%s\', \'listpane\');" %  the_url\n            response.flash = \'The changes were recorded successfully.\'\n        elif form.errors:\n            print form.vars\n            response.flash = \'Sorry, there was an error processing \' \\\n                             \'the form. The changes have not been recorded.\'\n        else:\n            #TODO: Why is this line being run when a record is first selected?\n            pass\n\n    elif len(request.args) == 1:\n        formname = \'%s/create\' % (tablename)\n\n        form = SQLFORM(db[tablename], separator=\'\', showid=False)\n        if form.process(formname=formname).accepted:\n            the_url = makeurl(tablename)\n            response.js = "web2py_component(\'%s\', \'listpane\');" %  the_url\n            response.flash = \'New record successfully created.\'\n        elif form.errors:\n            print form.vars\n            response.flash = \'Sorry, there was an error processing \'\\\n                             \'the form. The new record has not been created.\'\n        else:\n            pass\n\n    else:\n        response.flash = \'Sorry, you need to specify a type of record before I can listing the records.\'\n\n    return dict(form = form)\n\nresponse._vars=response._caller(edit)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/iscott/web/web2py/gluon/restricted.py", line 204, in restricted\n    exec ccode in environment\n  File "/home/iscott/web/web2py/applications/paideia/controllers/plugin_listandedit.py", line 133, in <module>\n  File "/home/iscott/web/web2py/gluon/globals.py", line 172, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/iscott/web/web2py/applications/paideia/controllers/plugin_listandedit.py", line 100, in edit\n    form = SQLFORM(db[tablename], rowid, separator=\'\', showid=False)\n  File "/home/iscott/web/web2py/gluon/sqlhtml.py", line 853, in __init__\n    inp = field.widget(field, default)\n  File "/home/iscott/web/web2py/applications/paideia/models/paideia.py", line 173, in <lambda>\n    editlist = True).widget()\n  File "applications/paideia/modules/plugin_ajaxselect.py", line 213, in widget\n    self.create_wrapper()\n  File "applications/paideia/modules/plugin_ajaxselect.py", line 195, in create_wrapper\n    content = SPAN(self.w) + refresh_a + adder + dialog\nTypeError: unsupported operand type(s) for +: \'SPAN\' and \'A\'\n'
p11
s.