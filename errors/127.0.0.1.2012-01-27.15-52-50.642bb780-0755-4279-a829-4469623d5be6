(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> 'dict' object has no attribute 'newTimesR'"
p3
sS'layer'
p4
S'/home/ian/web2py/applications/paideia/controllers/exploring.py'
p5
sS'code'
p6
S'# coding: utf8\nif 0:\n    from gluon import current, redirect, URL, SQLFORM, A, Field, IS_NOT_EMPTY\n    from gluon.dal import DAL\n    from gluon.tools import Auth\n    request,session,response,T,cache=current.request,current.session,current.response,current.T,current.cache\n    db = DAL()\n    auth = Auth()\n    from modules.paideia_exploring import activepath, counter\n    from modules.paideia_questions import question\n\nfrom paideia_exploring import activepath, counter\nfrom paideia_questions import question\n\n@auth.requires_login()\ndef index():\n\n    #after user selects quiz (or \'next question\')\n    if request.args(0) == \'ask\':\n        if not request.vars.response:\n            set_path = activepath()\n            set_counter = counter()\n            the_question = question()\n            the_question.selectq()\n\n        form = SQLFORM.factory(\n            Field(\'response\', \'string\', requires=IS_NOT_EMPTY())\n        )\n        if form.accepts(request.vars,session):\n            session.response = request.vars.response\n            redirect(URL(\'index\', args=[\'reply\']))\n\n        return dict(question=session.question_text, form=form)\n\n    #after submitting answer\n    elif request.args(0) == \'reply\':\n        #see whether answer matches any of the three answer fields\n        q = question()\n        the_eval = q.evalq()\n\n        #build response to user\n        if session.eval == \'correct\':\n            the_reply = "Right. \xce\x9a\xce\xac\xce\xbb\xce\xb7."\n        elif session.eval == \'partial\':\n            the_reply = "\xce\x9f\xe1\xbd\x90 \xce\xba\xce\xac\xce\xba\xce\xbf\xcf\x82. You\'re close."\n        else:\n            the_reply = "Incorrect. Try again!"\n\n        #add a record for this attempt in db.attempt_log\n        db.attempt_log.insert(question=session.q_ID, score=q.score, quiz=session.path_id)\n\n        return dict(reply=the_reply, answer=session.readable_answer, raw_answer=session.answer, score=session.score)\n\n    #if there\'s an error thrown after submitting an answer\n    elif request.args(0) == \'error\':\n        if request.args(1) == \'unknown\':\n            db.q_bugs.insert(question=session.qID, a_submitted=request.vars.answer)\n            #TODO: fix problem with changing column name for status\n            #db(db.questions.id==session.qID).update(qqq_status=1);\n        if request.args(1) == \'regex\':\n            db.q_bugs.insert(question=session.qID, a_submitted=request.vars.answer)\n            #db(db.questions.id==session.qID).update(qqq_status=1);\n        message = "Oops! Something about that question confused me, and I\'m not sure whether your answer was right. Let\'s try another one."\n        button = A(\'continue\', _href=URL(\'index\', args=[\'ask\']), _class=\'button-green-grad next_q\', cid=request.cid)\n        #don\'t include this question in counting the number attempted\n        session.q_counter -= 1\n        return dict(message = message, button = button)\n\n    #when first arrive at start page\n    else:\n        the_quizzes = db().select(db.quizzes.ALL, orderby=db.quizzes.quiz)\n        return dict(quizzes = the_quizzes)\n\nresponse._vars=response._caller(index)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/ian/web2py/gluon/restricted.py", line 204, in restricted\n    exec ccode in environment\n  File "/home/ian/web2py/applications/paideia/controllers/exploring.py", line 74, in <module>\n  File "/home/ian/web2py/gluon/globals.py", line 172, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/ian/web2py/gluon/tools.py", line 2533, in f\n    return action(*a, **b)\n  File "/home/ian/web2py/applications/paideia/controllers/exploring.py", line 39, in index\n    the_eval = q.evalq()\n  File "applications/paideia/modules/paideia_questions.py", line 158, in evalq\n    self.recordtag(session.qID)\n  File "applications/paideia/modules/paideia_questions.py", line 211, in recordtag\n    times_right = stats.newTimesR,\nAttributeError: \'dict\' object has no attribute \'newTimesR\'\n'
p11
s.