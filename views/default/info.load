{{
from plugin_widgets import TOOLTIP, TABS, ROLE
import json
}}

<div class="row">
    <div class="container">
        <div class="col-xs-12">
<!--Above Tabs ================================================================-->
{{=UL(LI(SPAN('Name', _class='profile-label'), the_name,
                        _class='profile-name'),
      LI(SPAN('Email', _class='profile-label'), email,
          _class='profile-email'),
      LI(SPAN('Time Zone', _class='profile-label'), tz,
          _class='profile-name'),
      _class='profile-user-info')
}}
{{
# TAB 1 - BADGE INFO ==========================================================
if target_set:
    targetmsg = 'I began this term at badge set {} and my goal to earn an ' \
                'A is to reach set {} by {}'.format(starting_set,
                                                      target_set,
                                                      end_date),
else:
    targetmsg = ''
pass

set_scale_cells = TR(*[TD(SPAN('badge', BR(), 'set', _class='set-scale-label'),
                          BR(),
                          SPAN(n, _class='set-scale-num'), _class='') for n in range(1, 21)])
for n in range(int(max_set)):
    set_scale_cells[n]['_class'] = 'active'
pass
if target_set:
    set_scale_cells[starting_set - 1].append(SPAN('Term start', _class='set-scale-start'))
    set_scale_cells[target_set - 1].append(SPAN('A-grade target', _class='set-scale-target'))
pass

tab1_content = CAT(H4('Progress through the badge sets'),
                   DIV(P(TABLE(set_scale_cells, _class="set_scale"),
                         'So far, I have reached badge set {}. {}'.format(max_set, targetmsg)),
                         _id='info-tab1-set-progress'),
                   H4('Level of mastery in each badge'),
                   DIV(TABLE(TR(TD('master'),
                                TD(len(badge_levels[4])),
                                TD(UL([LI(b[0], _class='label label-success') for b in badge_levels[4]]))
                                ),
                             TR(TD('journeyman'),
                                TD(len(badge_levels[3])),
                                TD(UL([LI(b[0], _class='label label-info') for b in badge_levels[3]]))
                                ),
                             TR(TD('apprentice'),
                                TD(len(badge_levels[2])),
                                TD(UL([LI(b[0], _class='label label-primary') for b in badge_levels[2]]))
                                ),
                             TR(TD('beginner'),
                                TD(len(badge_levels[1])),
                                TD(UL([LI(b[0], _class='label label-warning') for b in badge_levels[1]]))
                                ),
                             _class='table table-bordered summary_stats'
                             ),
                       _id='info-tab1-badge-levels'),
                   H4('Detailed badge record'),
                   DIV(TABLE(THEAD(TR(TH('Badge'),
                                      TH('Set'),
                                      TH('Level'),
                                      TH('Right per 1 wrong'),
                                      TH('Avg score (7 days)'),
                                      TH('Times Right'),
                                      TH('Times Wrong'),
                                      TH('Between right and wrong'),
                                      TH('Since last right'),
                                      TH('Last Right'),
                                      TH('Last Wrong'),
                                      TH('Since last wrong'),
                                      TH('Attempts today'),
                                      TH('Attempts yesterday')
                                      ),
                                    _class='header'
                                    ),
                              _class='table table-hover table-condensed',
                              _id='table-badges'
                              ),
                        _class='dc_container badgetable-container',
                        _style='font: 12px sans-serif;'
                        )
                    )
}}
{{for trow in badge_table_data:
badgerow = TR(TD(trow['bname']),
              TD(trow['set']),
              TD(trow['curlev']),
              TD(trow['rw_ratio']),
              TD(trow['avg_score']),
              TD(trow['tright']),
              TD(trow['twrong']),
              TD(trow['delta_rw'].days),
              TD(trow['delta_r'].days),
              TD(trow['tlr'][1]),
              TD(trow['tlw'][1]),
              TD(trow['delta_w'].days),
              TD(trow['todaycount']),
              TD(trow['yestcount']),
              )
badgerow[8]['_data-order'] = trow['tlr'][0]  # sort column by raw date
badgerow[9]['_data-order'] = trow['tlw'][0]  # sort column by raw date
tab1_content[5][0].append(badgerow)

pass

# TAB 2 - BADGES =============================================================

tab2_content = CAT(P('Sorry, something went wrong retrieving your badges.'))

tab2_content.append(CAT(H3('What do these levels mean?'),
    P('It is important to realize that the four badge levels above are '
      'not "grades" like the letter grades we earn in most courses. They are, '
      'instead, stages in your learning of each element of Greek. Level 1 '
      '(beginner) is awarded when you start to learn a topic. It simply means '
      'that you are working on it. In your daily interactions in the town, the '
      'program will prioritize conversations tagged with these "beginner" badges '
      'since they are the ones you most need to review.'),
    P('At the other end of the scale, Level 4 (master) is awarded when you no '
      'longer need to learn anything more about that aspect of the language. '
      'You have shown that this knowledge is now in your long-term memory, and '
      'you are now on a permanent maintenance routine in which you only review '
      'that material once every six months. Don\'t be discouraged if you find '
      'that it takes a long time to reach "master" level for any badges. This '
      'doesn\'t mean you aren\'t progressing. It just means that you\'re still '
      'working on getting that topic into your long-term memory -- a process '
      'that can\'t be rushed.'),
    P('Between these two extremes, level 2 ("apprentice") and level 3 '
      '("journeyman") represent increasing levels of mastery over a particular '
      'element of Greek. You will review the material related to such badges '
      'less and less often as you continue to provide good responses when such '
      'conversations do come up. Normally, you will find that badges begun '
      'during a term will remain at levels 2 or 3 through at least the balance '
      'of that term. This doesn\'t mean anything is wrong. It just represents '
      'the fact that true mastery is a longer-term goal.'),
    H3('How do I earn new badges?'),
    P('You begin a new badge at level 1 when all of your current badges have '
      'been promoted to level 2 or higher. The program recognizes that you are '
      'ready to learn something new.'),
    P('There are two different ways to reach level 2 ("apprentice") with a '
      'particular badge. (a) First, if you provide consistently right answers '
      '(with no errors) over a period of a day or two, then that badge will be '
      'promoted to level 2. (b) Alternately, you will be promoted despite some '
      'errors if you have given at least 8 correct responses for each error over '
      'the last two weeks. In either case you won\'t be promoted until you have '
      'done at least 20 paths related to that badge, with at least 24 hours '
      'between the first success and the most recent success. Keep in mind that '
      'on a given day your paths will not all be focused on the same badges. '
      'So even if you provide good answers on 20 paths in a row, this may mean '
      'that you have only added 5 or 6 successes to your record for a particular '
      'badge. This is one advantage of doing extra paths regularly - you will '
      'progress more quickly because you are working on each of your level 1 '
      'badges more often.'),
    P('Levels 3 and 4 are reached as you go longer and longer without any '
      'errors in your responses on a given topic. If you make no errors with a '
      'badge over 7 days, it will be promoted to level 3. You are clearly '
      'retaining that knowledge and beginning toward real mastery. If you then '
      'go 30 days without any errors on that topic, the badge will be promoted '
      'to level 4 (mastered).'),
    H3('What are the "Badge Level" and "Review Level" columns?'),
    P('In the "badge level" column you see the highest level you have achieved '
      'so far for a particular badge. Periodically, though, the program will '
      'decide that you need to review your level 2, 3, or 4 badges. At that '
      'point, the badge will move to "level 1" in the "review level" column. '
      'This doesn\'t mean you have been demoted. It just means that the program '
      'is going to prioritize that badge as if it were brand new material. Even '
      'for badges that you have mastered, you will review those topics at least '
      'once every three months. If you give good responses to the review '
      'material, this review level will last only a day. The next day you will '
      'find the badge has returned to its normal review level and you will be '
      'much less likely to see those paths until the next review period is up.'),
    P('If you give a wrong answer during a review period, you don\'t lose your '
      'previous badge level. But the program recognizes that you may need to '
      'review that material more frequently. So, instead of the badge jumping '
      'right back to its original review level, you will see it move up through '
      'the review levels as if you were earning it again. This just means that '
      'the program is making sure you see it often enough. If you don\'t make '
      'more mistakes, you will quickly find the badge\'s review level is back '
      'up to the "badge level" you have attained.')
))

# TAB 3 - CALENDAR ===========================================================
tab3_content = XML(cal)

# TAB 4 - BUGS ===============================================================
tab4_content = TABLE(TR(TH('question'),
                        TH('your answer'),
                        TH('original score'),
                        TH('submitted'),
                        TH('your comments'),
                        TH('evaluation'),
                        TH('adjusted score'),
                        TH('instructor\'s comments'),
                        TH('mark as read')),
                     _class='table table-condensed')
status_classes = {'awaiting review': '',
                  'confirmed': 'danger',
                  'duplicate': '',
                  'fixed': 'success',
                  'not_a_bug': 'warning',
                  'allowance_given': 'warning'}
for bug in blist:
    # from pprint import pprint
    # pprint(bug)
    classes = '{} {}'.format(status_classes[bug[6]], bug[-1])
    row = TR(_class=classes)
    # first position is the id, used in edit link
    for val in bug[1:]:
        if val not in ['bug-read', 'bug-unread']:
            val = val if val != None else ''
            row.append(TD(str(val).replace('_', ' '), _class=status_classes[bug[6]]))
        pass
    pass
    if bug[-1] == 'bug-read' and bug[8]:
        row.append(TD(INPUT(_type='checkbox', _checked='checked', _name=bug[0], _class='mark_bug_read read-with-comment')))
    elif bug[-1] == 'bug-unread' and bug[8]:
        row.append(TD(INPUT(_type='checkbox', _name=bug[0], _class='mark_bug_read unread-with-comment')))
    elif not bug[8]:
        row.append(TD(INPUT(_type='checkbox', _disabled='true', _name=bug[0], _class='mark_bug_read read-without-comment')))
    else:
        row.append(TD(INPUT(_type='checkbox', _name=bug[0], _class='mark_bug_read other')))
    pass

    row.append(ROLE(TD(A('edit', _href=URL('editing', 'listing.html',
                                           args=['bugs', bug[0]],
                                           vars=dict(restrictor={'bug_status': '5'}))
                    ))))
    tab4_content.append(row)
pass

# TAB 5 - SETTINGS ==============================================================

tab5_content = DIV(H4('Review a badge set'),
                   SELECT(_id='set_review_select', _class='form-control'),
                   P('If you select a badge set from the menu above, you will '
                     'only be given paths selected (randomly) from that badge '
                     'set. When you want to return to the normal selection of '
                     'paths, select \'Stop reviewing.\'', _class='text-info')
                   )
if reviewing_set:
    tab5_content[1].append(OPTION('badge set {}'.format(str(reviewing_set))))
    tab5_content[1].append(OPTION('Stop reviewing'))
else:
    tab5_content[1].append(OPTION('Not reviewing'))
pass
for n in range(1,21):
    tab5_content[1].append(OPTION('badge set {}'.format(str(n))))
pass

# TAB 6 - STATS ==============================================================

tab6_content = DIV(
               CAT(H4('Badge set progress with correct and incorrect answers'),
                   DIV(_id='milestones_attempts_combo'),
                   DIV(_id='stats-milestones'),
                   H4('Attempts by Tag Category'),
                   LOAD('reporting', 'tag_counts.load',
                        vars={'user_id': user_id}, ajax=True, target='tag-counts'),
                _class='stats-container')
                )
}}

<!--# ASSEMBLE AND PRINT ==================================================-->
{{=TABS([('My Badges', 'web2py_user_form', tab1_content, 'active'),
         ('My Calendar', 'tab_calendar', tab3_content),
         ('My Queries', 'tab_bug_reports', tab4_content),
         ('My Settings', 'tab_settings', tab5_content),
         ('My Stats', 'tab_stats', tab6_content)])
}}

<!--# LOCAL SCRIPTS ======================================================-->
<script type="text/javascript" charset="utf-8">
// chart 1
(function() {

    function transition_data() {
      svg.selectAll(".rect")
        .data(data)
      .transition()
        .duration(500)
        .attr("cx", function(d) { return x(d.index); });
    }

    function reset_axis() {
      svg.transition().duration(500)
       .select(".x.axis")
       .call(x_axis);
    }

    var data = JSON.parse('{{=XML(json.dumps(chart1_data))}}');
    // preprocess data to get usable date objects
    var parse_date = d3.time.format('%Y-%m-%d').parse
    for (var i in data) {
        var myObj = data[i]
        for (var j in myObj) {
            myObj[j].date = parse_date(myObj[j].date);
        }
    }
    console.log(data);

    // set variables
    var margin = { left: 40, right: 60, top: 10, bottom: 140 },
        navMargin = {top: 300, right: 60, bottom: 40, left: 40},
        height = 400 - margin.top - margin.bottom,
        width = 800 - margin.left - margin.right,
        navWidth = width, // for context band
        navHeight = 400 - navMargin.top - navMargin.bottom,
        max_total_counts = d3.max(data.answer_counts, function(d) { return d.total; }),
        max_extent_dates = d3.extent(data.answer_counts, function(d) { return d.date; });
        max_extent_in_days = function(timescale) {
            return d3.time.days(timescale.domain()[0], d3.time.day.offset(timescale.domain()[1], 1))
            };

    // scales
    var y = d3.scale.linear().domain([0, max_total_counts]).rangeRound([height, 0]),
        navY = d3.scale.linear().domain([0, max_total_counts]).rangeRound([navHeight, 0]),
        time = d3.time.scale().domain(max_extent_dates).range([0, width]),
        navTime = d3.time.scale().domain(max_extent_dates).range([0, width]),
        x = d3.scale.ordinal().domain(max_extent_in_days(time)).rangeBands([0, width], 0.1, 0), // used to calculate bar widths
        navX = d3.scale.ordinal().domain(max_extent_in_days(navTime)).rangeBands([0, width], 0.1, 0),
        y2 = d3.scale.linear().domain([0, d3.max(data.badge_set_reached, function(d) { return d.set})]).rangeRound([height, 0]);
        navY2 = d3.scale.linear().domain([0, d3.max(data.badge_set_reached, function(d) { return d.set})]).rangeRound([navHeight, 0]);

    // axes
    var x_axis = d3.svg.axis().scale(time).orient('bottom') //    .tickFormat(d3.time.format('%Y-%m-%d'))
                   .outerTickSize(0),  // at start and end of axis line
        nav_x_axis = d3.svg.axis().scale(navTime).orient('bottom') //    .tickFormat(d3.time.format('%Y-%m-%d'))
                       .outerTickSize(0),  // at start and end of axis line
        y_axis = d3.svg.axis().scale(y).orient('left').tickFormat(d3.format('d'));
        y2_axis = d3.svg.axis().scale(y2).orient('right').tickFormat(d3.format('d'));

    // add brush
    var brush = d3.svg.brush()
        .x(navTime)
        .on("brush", brushed);

    // svg context
    var svg = d3.select("#milestones_attempts_combo")
         .append('svg')
            .attr('class', 'chart')
            .attr('width', width + margin.left + margin.right)
            .attr('height', height + margin.top + margin.bottom)
         .append('g')
            .attr('transform', 'translate(' + margin.left + ','
                    + margin.top + ')');

    var focus = svg.append('g')
        .attr('class', 'focus')
        .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');

    var context = svg.append('g')
        .attr('class', 'context')
        .attr('transform', 'translate(' + navMargin.left + ',' + navMargin.top + ')');

    // Plot the stacked bars
    var focus_bar = focus.selectAll('.g')
                 .data(data.answer_counts)
             .enter().append('g')
                .attr('class', 'g bar stack')
                .attr('transform', function(d) {
                                        return "translate(" + x(d.date) + ",0)" });

    var focus_rects = focus_bar.selectAll('rect')
                    .data(function(d) { return d.ys; })
                 .enter().append('rect')
                    .attr('width', x.rangeBand())
                    .attr('height', function(d) { return y(d.y0) - y(d.y1); })
                    .attr('y', function(d) { return y(d.y1); })
                    .attr('class', function(d) { return 'rect ' + d['class']; });

    var context_bar = context.selectAll('.g')
                 .data(data.answer_counts)
             .enter().append('g')
                .attr('class', 'g')
                .attr('transform', function(d) {
                                        return "translate(" + navTime(d.date) + ",0)" });

    var context_rects = context_bar.selectAll('rect')
                    .data(function(d) { return d.ys; })
                 .enter().append('rect')
                    .attr('width', navX.rangeBand())
                    .attr('height', function(d) { return navY(d.y0) - navY(d.y1); })
                    .attr('y', function(d) { return navY(d.y1); })
                    .attr('class', function(d) { return 'rect ' + d['class']; });

    // Plot lines

    var line = d3.svg.line()
                .x(function(d) {return time(d.date)})
                .y(function(d) {return y2(d.set)})
                .interpolate('step-after');
    var focus_line = focus.append('path')
                        .datum(data.badge_set_reached)
                        .attr('class', 'line focus-line')
                        .attr('d', line);

    var line2 = d3.svg.line()
                .x(function(d) {return time(d.date)})
                .y(function(d) {return navY2(d.set)})
                .interpolate('step-after');
    var context_line = context.append('path')
                        .datum(data.badge_set_reached)
                        .attr('class', 'line context-line')
                        .attr('d', line2);

    // Plot axes
    focus.append('g')
       .attr('class', 'x axis')
       .attr('transform', 'translate(0, ' + height + ')')
       .call(x_axis)
    //    .selectAll('text')
    //         .style('text-anchor', 'end')
    //         .attr('transform', 'rotate(-45deg)')
    //         .attr('dx', '-.5em')
    //         .attr('dy', '.5em');

    focus.append('g')
       .attr('class', 'y axis')
       .attr('transform', 'translate(0, 0)')
       .call(y_axis);

    var y2pos = width;
    focus.append('g')
       .attr('class', 'y2 axis')
       .attr('transform', 'translate(' + y2pos + ', 0)')
       .call(y2_axis);

    context.append('g')
       .attr('class', 'navX axis')
       .attr('transform', 'translate(0, ' + navHeight + ')')
       .call(nav_x_axis);

    // Label axes

    svg.append('text')
        .attr('class', 'label y-axis-label')
        .attr('transform', 'rotate(-90)')
        .attr('x', 0 - ((height + margin.top) / 2))
        .attr('y', 0)
        .style('text-anchor', 'middle')
        .text('Paths Attempted');

    // Add brush to svg
    context.append('g')
        .attr('class', 'x brush')
        .call(brush)
    .selectAll("rect")
      .attr("y", -6)
      .attr("height", navHeight + 7);

    function brushed() {
        time.domain(brush.empty() ? navTime.domain() : brush.extent())
            .range([0, width]);
        x.domain(max_extent_in_days(time))
            .rangeBands([0, width], 0.1, 0);
        console.log(x.rangeBands);
        focus.selectAll('.bar.stack')
            .attr('transform', function(d) {return "translate(" + time(d.date) + ",0)"; })
            .attr('width', x.rangeBand());
        focus.selectAll('.rect')
            .attr('width', x.rangeBand());
        focus.selectAll('.line').attr('d', line);
        focus.select(".x.axis").call(x_axis);
        console.log('im brushed');
        console.log(data);
    };
})();


// show tab from hash when first opening page
var url = document.location.toString();
if (url.match('#')) {
    $('.nav-tabs a[href=#'+url.split('#')[1]+']').tab('show') ;
    window.scrollTo(0, 0);
};

// Change hash for when tab shown
$('.nav-tabs a').on('shown.bs.tab', function (e) {
    window.location.hash = e.target.hash;
});

// Change selection type when changing select value
$(document).on('change', '#set_review_select', function(event){
    var myset_label = $(this).val();
    var myset = myset_label.replace('badge set ', '');
    if (isNaN(myset)){
        myset = 'none';
    };
    ajax('/paideia/default/set_review_mode/' + myset, [], ':eval');
});

(function() {
    var badgetable = $('#table-badges').DataTable({
                        paging: false,
                        scrollY: '400px',
                        scrollX: true,
                        renderer: 'bootstrap',
                        order: [2, 'asc'],
                        colVis: {
                            exclude: [ 0 ]
                        }
                     });
    new $.fn.dataTable.FixedColumns( badgetable );
    var colvis = new $.fn.dataTable.ColVis( badgetable );
    $( colvis.button() ).insertBefore('div.badgetable-container');

    // below inferface exposed by static/js/user_stats.js
    // user_stats.badge_set_milestones = JSON.parse('{{=XML(json.dumps(badge_set_milestones))}}');
    // user_stats.answer_counts = JSON.parse('{{=XML(json.dumps(answer_counts))}}');
    // user_stats.render_all();
})();

$(document).on('change', 'input.mark_bug_read', function(event){
                  console.log('clicked me');
                  var bugid = $(this).attr('name');
                  console.log(bugid);
                  var myval = $(this).prop('checked');
                  console.log(myval);
                  var $therow = $(this).parents('tr');
                  console.log($therow);
                  ajax('/paideia/default/mark_bug_read/' + bugid + '/' + myval, [], ':eval');
                  var $counter = $(document).find('#unread-counter span');
                  console.log($counter);
                  console.log($counter.text());
                  startCount = parseInt($counter.text());
                  if(myval == true){
                      $therow.removeClass('bug-unread');
                      $therow.addClass('bug-read');
                      newCount = startCount - 1;
                      $counter.text(newCount);
                  } else {
                      $therow.addClass('bug-unread');
                      $therow.removeClass('bug-read');
                      newCount = startCount + 1;
                      $counter.text(newCount);
                  };
});

$(document).on('click',
               'a.monthpicker, a.monthcal_nav_link_next, a.monthcal_nav_link_previous',
               function(event){
        event.preventDefault();
        myurl = $(this).attr('href');
        ajax(myurl, [], 'paideia_monthcal');
});


</script>

</div>
</div>
</div>

<style>
/***********************/
/* USER STATS & CHARTS */
/***********************/
/*#milestones_attempts_combo {height: 600px;}*/

#milestones_attempts_combo .context {
    /*fill: #efefef;    */
}

#milestones_attempts_combo .focus .right,
#milestones_attempts_combo .context .right{
    fill: #0064cd;
}

#milestones_attempts_combo .focus .wrong,
#milestones_attempts_combo .context .wrong {
    fill: #cd001d;
}
#milestones_attempts_combo .y-axis-label {
    fill: #aaa;
    font-size: 120%;
}

#milestones_attempts_combo .focus-line,
#milestones_attempts_combo .context-line {
    stroke: orange;
    stroke-width: 2;
    fill-opacity: 0;
}

.brush .extent {
  stroke: #efefef;
  fill: #666;
  fill-opacity: .125;
  shape-rendering: crispEdges;
}

.stats-container {
    width: 700px;
    margin: 0 auto;
}

.chart .axis line,
.chart .axis path,
.chart .tick line {
    fill: none;
    stroke: black;
}

.chart .axis line,
.chart .axis path {
    shape-rendering: crispEdges;
}

.chart .axis text {
    font-size: .9em;
}

#stats-milestones .focus path,
#stats-answers .focu path {
    stroke: #0064cd;
}

#stats-answers .focus .right {
    fill: #0064cd;
}

#stats-answers .focus .wrong {
    fill: #cd001d;
}
</style>
